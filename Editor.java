import java.io.IOException;
import java.sql.* ;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     * 
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    public static final String Username = 'cs144';
    public static final String Pw = "";
    private Connection c;
    private PreparedStatement insertState = null;
    private PreparedStatement selectState = null;
    private PreparedStatement selectUserstate = null;
    private PreparedStatement deleteState = null;
    private PreparedStatement getPostState = null;
    private PreparedStatement updateState = null;


    public Editor() {}

    public void init() throws ServletException
    {
        /*  write any servlet initialization code here or remove this function */
        try{
            class.forName("com.mysql.jdbc.Driver");
            Connection c= DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144",
                    "cs144", "");
            insertState = c.prepareStatement("INSERT INTO Posts Values " + "(?,?,?,?,?,?)" );
            selectState = c.prepareStatement("SELECT * FROM WHERE username = ? AND postid = ?");
            selectUserstate = c.prepareStatement("SELECT * FROM Posts WHERE username = ?");
            deleteState = c.prepareStatement("DELETE FROM Posts WHERE postid = ? AND username = ?");
            getPostState = c.prepareStatement("SELECT MAX(postid) FROM Posts where username = ?");
            updateState = c.prepareStatement("UPDATE Posts SET title = ?, body = ?, modified = ? WHERE username = ? AND postid = ?")

        }
        catch(SQLException ex) {
            return;
        }catch(ClassNotFoundException ex) {
            return;
        }
    }
    
    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    /**
     * Handles HTTP GET requests
     * 
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your GET method handling code here
        String attri = {"action", "username", "postid", "title", "body"};
        String action = request.getParameter("action");
        HashMap<String, String> attibutes = new HashMap<String, String>();

        for(int i = 0; i < attri.length; i++){
            attibutes.put(attri[i], request.getParameter(attri[i]));
        }

        try{
            switch(action){
                case "open":
                    open(request,response);
                    break;
                case "preview":
                    preview(request,response);
                    break;
                case "list":
                    list(request,response);
                    break;
                default:
                    request.setAttribute("error",action,"can not be generated by GET.");
                    throw new ServletException("Invalid  Action!" + action );
                    break;
            }

        }catch(ServletException ex) {
            String msg = ex.toString();
            request.setAttribute("msg", msg);
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
	// currently we simply show the page generated by "edit.jsp"

        //request.getRequestDispatcher("/edit.jsp").forward(request, response);
    }
    
    /**
     * Handles HTTP POST requests
     * 
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"
        String action = request.getParameter("action");
        try {
            switch (action) {
                case "open":
                    open(request, response);
                    break;
                case "preview":
                    preview(request, response);
                    break;
                case "list":
                    list(request, response);
                    break;
                case "save":
                    save(request, response);
                    break;
                case "delete":
                    delete(request, response);
                    break;
                default:
                    request.setAttribute("error", action, "can not be generated by GET.");
                    throw new ServletException("empty Action!");
                    break;

            }
        }catch(ServletException ex) {
            String msg = ex.toString();
            request.setAttribute("msg", msg);
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
    }


    public void open(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        String attri = {"action", "username", "postid", "title", "body"};
        HashMap<String, String> attibutes = new HashMap<String, String>();
        for(int i = 0; i < attri.length; i++){
            attibutes.put(attri[i], request.getParameter(attri[i]));
        }
        String action = null, username = null, postid = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");
        int postidInt = 0;
        ResultSet rs = null;

        try {

            if (!username || !postid) {
                request.setAttribute("error", "Action " + action + " require parameters: username and postid");
                throw new ServletException("Missing required username or postid");
            } else {
                postidInt = Integer.parseInt(postid);
                if (postid > 0) {
                    if (title == null || body == null) {
                        try {
                            selectState.setString(1, username);
                            selectState.setString(2, postidInt);
                            rs = selectState.executeQuery();
                            if(!rs.next()){
                                request.setAttribute("error", "(username, postid) does not exist in the database");
                                throw new ServletException("(username, postid) does not exist in the database")

                            }else{
                                title = rs.getString("title");
                                body = rs.getString("body");
                                request.setAttribute("title", title);
                                request.setAttribute("body", body);
                                request.getRequestDispatcher("/edit.jsp").forward(request, response);
                            }

                        }catch(SQLException ex) {
                            String msg = ex.toString();
                            request.setAttribute("msg", msg);
                            request.getRequestDispatcher("/error.jsp").forward(request, response);
                        }

                    } else {
                        request.getRequestDispatcher("/edit.jsp").forward(request, response);
                    }

                } else if (postid <= 0) {
                    if (title == null || body == null) {
                        request.setAttribute("title", "");
                        request.setAttribute("body", "");
                        request.getRequestDispatcher("/edit.jsp").forward(request, response);

                    } else {
                        request.getRequestDispatcher("/edit.jsp").forward(request, response);
                    }
                }
            }

        }catch(SQLException ex) {
            String msg = ex.toString();
            request.setAttribute("msg", msg);
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }

    }

    public void save(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException
    {
        String action = null, username = null, postid = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");
        int postidInt = 0;
        ResultSet rs = null;

        if (username == null || postid == null || title == null || body == null) {
            request.setAttribute("error", "Action " + action + " require parameters: username and postid");
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }else{
            postidInt = Integer.parseInt(postid);
            try {
                if (postidInt <= 0) {
                    maxid = c.prepareStatement(SQL_MAXID);
                    maxid.setString(1, username);
                    rs = maxid.executeQuery();
                    if (!rs.next()) {
                        postidInt = 1;
                    } else {
                        postidInt = rs.getInt("max") + 1;
                    }
                    rs.close();
                    insertState.setString(1, username);
                    insertState.setString(2, postidInt);
                    insertState.setString(3, title);
                    insertState.setString(4, body);
                    insertState.setTimestamp(5, getCurrentTimeStamp());
                    insertState.setTimestamp(6, getCurrentTimeStamp());
                    insertState.executeUpdate();
                    request.setAttribute("postid", postidInt);
                    list(request, response);
                } else if (postidInt > 0) {
                    selectState.setString(1, username);
                    selectState.setString(2, postidInt);
                    rs = selectState.executeQuery();
                    if (rs.next()) {
                        updateState.setString(1, title);
                        updateState.setString(2, body);
                        updateState.setTimestamp(3, getCurrentTimeStamp());
                        updateState.setString(4, username);
                        updateState.setString(4, postid);
                        updateState.executeUpdate();
                        list(request, response);
                    }

                }
            }catch (Exception ex) {
                request.setAttribute("error", "Exception: " + ex.getMessage());
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                request.getRequestDispatcher("/error.jsp").forward(request, response);
            }
        }
    }

    public void delete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
        String action = null, username = null, postid = null;
        int postidInt = 0;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");

        if(username == null || postid == null)
        {
            request.setAttribute("error","Action " + action + " require: username and postid");
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }else {
            postidInt = Integer.parseInt(postid);
            try{
                deleteState.setString(1,postidInt);
                deleteState.setString(2,username);
                deleteState.executeUpdate();
                list(request, response);
            }
        }
    }

    public void preview((HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException)
    {
        String action = null, username = null, postid = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        postid = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");

        if (username == null || postid == null || title == null || body == null) {
            request.setAttribute("error",
                    "Action " + action + " require parameters: username, postid, title, and body");
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }else{
            Parser parser = Parser.builder().build();
            HtmlRenderer renderer = HtmlRenderer.builder().build();
            String renderedTitle = renderer.render(parser.parse(title));
            String renderedBody = renderer.render(parser.parse(body));
            request.setAttribute("renderedTitle", renderedTitle);
            request.setAttribute("renderedBody", renderedBody);
            request.setAttribute("body", body);
            request.setAttribute("title", title);
            request.getRequestDispatcher("/preview.jsp").forward(request, response);
        }

    }

    public void list(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String action = null, username = null, title = null, body = null;
        action = request.getParameter("action");
        username = request.getParameter("username");
        ResultSet rs = null;
        int postidInt;
        Date modified0 = null, created0 = null;
        String modified = null, created = null;

        if (username == null) {
            request.setAttribute("error", "Action " + action + " require parameters: username");
            response.setStatus(HttpServletResponse.SC_NOT_FOUND);
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }else{
            try {
                selectUserstate.setString(1,username);
                rs = selectUserstate.executeQuery();
                List<PostEntry> mylist = new ArrayList<>();
                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM/dd/yyyy' 'HH:mm:ss");
                while(rs.next()){
                    ArrayList row = new ArrayList();
                    username = rs.getString("username");
                    postidInt = rs.getInt("postid");
                    title = rs.getString("title");
                    body = rs.getString("body");
                    modified0 = rs.getDate("modified");
                    modified = dateFormat.format(modified0);
                    created0 = rs.getDate("created");
                    created = dateFormat.format(created0);

                    row.add(title);
                    row.add(created);
                    row.add(modified);
                    row.add(postidInt);
                    mylist.add(row);

                }
                request.setAttribute("list",mylist);
                request.getRequestDispatcher("/list.jsp").forward(request, response);

            }catch(SQLException ex) {
                String msg = "SQL error happens.";
                request.setAttribute("msg", msg);
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                request.getRequestDispatcher("/error.jsp").forward(request, response);
            }catch (Exception ex) {
                request.setAttribute("error", "Exception: " + ex.getMessage());
                response.setStatus(HttpServletResponse.SC_NOT_FOUND);
                request.getRequestDispatcher("/error.jsp").forward(request, response);
            }
        }
    }
    public void destroy()
    {
        try { deleteState.close(); } catch (Exception e) {}
        try { insertState.close(); } catch (Exception e) {}
        try { selectState.close(); } catch (Exception e) {}
        try { selectUserstate.close(); } catch (Exception e) {}
        try { updateState.close(); } catch (Exception e) {}
        try { con.close(); } catch (Exception e) {}
    }





}

