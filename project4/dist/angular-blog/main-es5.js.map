{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/blog.service.ts","webpack:///src/app/edit/edit.component.ts","webpack:///src/app/edit/edit.component.html","webpack:///src/app/list/list.component.ts","webpack:///src/app/list/list.component.html","webpack:///src/app/preview/preview.component.ts","webpack:///src/app/preview/preview.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","useHash","imports","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","BlogService","maxPostid","username","resp","fetch","res","json","data","posts","doc","Math","max","postid","post","Post","created","modified","body","push","error","console","onep","log","method","parseData","credentials","headers","JSON","stringify","draft","update","Date","status","providedIn","EditComponent","blogService","router","activatedRoute","parseJWT","document","cookie","usr","snapshot","paramMap","get","params","subscribe","getCurrentDraft","Number","getPost","deletePost","window","location","reload","navigate","curpost","fetchPosts","flag","curpo","newPost","updatePost","setCurrentDraft","token","base64Url","split","base64","replace","parse","atob","ListComponent","selectPost","showMaxid","curUsername","ret","now","PreviewComponent","reader","writer","title_preview","render","body_preview","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EditComponent } from './edit/edit.component';\nimport { PreviewComponent } from './preview/preview.component';\n\n\nconst routes: Routes = [{ path: 'edit/:id', component: EditComponent },\n{ path: 'preview/:id', component: PreviewComponent }];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, { useHash: true })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\n//import { BlogService } from './blog.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  //providers: [BlogService]\n})\nexport class AppComponent {\n  title = 'angular-blog';\n\n}\n","<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * The content above * * * * * * * * * * * -->\n<!-- * * * * * * * * * * is only a placeholder * * * * * * * * * * -->\n<!-- * * * * * * * * * * and can be replaced. * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n<!-- * * * * * * * * * * End of Placeholder * * * * * * * * * * * -->\n<!-- * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * -->\n\n \n<h1>{{this.title}}</h1>\n<router-outlet></router-outlet>\n<app-list></app-list> \n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ListComponent } from './list/list.component';\nimport { EditComponent } from './edit/edit.component';\nimport { PreviewComponent } from './preview/preview.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent,\n    PreviewComponent,\n   EditComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    AppRoutingModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","\nimport { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { catchError, tap, mergeMap, map } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class BlogService {\n\n\n  //public posts: Post;\n  public draft: Post;\n  public maxPostid: number = -1;\n\n\n\n  constructor() { }\n\n  fetchPosts(username: string):Promise<Post[]>{\n\n    let resp = fetch(\"/api/\" + username)\n    .then(res => res.json()).then(data => {\n\n                          let posts: Post[]= [];\n                          for (let doc in data ){\n                            this.maxPostid = Math.max(this.maxPostid, data[doc].postid);\n\n                            let post: Post = new Post();\n\n                              post.postid= data[doc].postid;\n                              post.created= data[doc].created;\n                              post.modified= data[doc].modified;\n                              post.title= data[doc].title;\n                              post.body= data[doc].body;\n                              \n\n\n                            posts.push(post);\n                         }\n\n                             return posts;\n\n                        })\n\n    .catch((error) => {\n    console.error('Error:', error);\n    return null;\n    });\n    return resp;\n\n    }\n    //.catch((error) => {\n    //  console.error('Error:', error);\n   // });\n\n    //.then(data => console.log(data))\n  /*\n  getPost(username: string, postid: number): Promise<Post> {\n    let get = fetch(\"api/\" + username + '/' + postid, {\n      headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n      method: 'GET' //| 'POST',\n     // body: JSON.stringify(post)\n    })\n      .then(res => res.json())\n      .then(res => console.log(res.status))\n      .catch((error) => {\n        console.error('Error:', error);\n      });\n    return get;\n\n  } */\n  parseData(post): Post {\n    let onep: Post = new Post();\n    onep.postid = post['postid'];\n    onep.body = post['body'];\n    onep.created = post['created'];\n    onep.modified = post['modified'];\n    onep.title = post['title'];\n    return onep; //new Post(post['postid'], post['created'], post['modified'], post['title'], post['body']);\n  }\n  \n  getPost(username: string, postid: number): Promise<Post>{\n    console.log(\"/api/\" + username + '/' + postid);\n    let resp = fetch(\"/api/\" + username + '/' + postid, { method:\"GET\"})\n      .then(res => {\r\n        console.log(res.body);\r\n       return res.json();\n        \n      })\n      .then(data => {\n        console.log(data);\n        console.log(this.parseData(data[0]));\n            return this.parseData(data[0]);\n            \n          })\n        .catch((error) => {\n            console.error('Error:', error);\n            return null;\n            });\n\n        return resp;\n    }\n  newPost(username: string, post: Post): Promise<void> {\n    let postid = this.maxPostid + 1;\n    if (post.postid) {\n      let postid = post.postid;\n    } else {\n      let postid = this.maxPostid + 1;\n      post.postid = postid;\n    }\n    console.log(\"/api/\" + username + '/' + postid);\n    let res = fetch(\"/api/\" + username + '/' + postid,\n      {\r\n        method: \"POST\",\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n         body: JSON.stringify(post)\r\n      })\n      .then(() => { this.maxPostid = this.maxPostid + 1;})\n        /*\n        .then(data =>{\n          let onepost: Post[];\n          let post: Post = new Post();\n          console.log(\"newPost id\",data.postid);\n\n             post.postid= data.postid;\n             post.created= data.created;\n             post.modified= data.modified;\n             post.title= data.title;\n             post.body= data.body;\n             onepost.push(post);\n          //return onepost;\n          this.maxPostid = this.maxPostid + 1;\n        })\n        */\n        .catch((error) => {\n                     console.error('Error:', error);\n\n        });\n        \n         return res;\n\n    }\n\n\n    setCurrentDraft(post: Post): void{\n      this.draft = post;\n      console.log(\"test\");\n      console.log(post.postid);\n\n    }\n  getCurrentDraft(): Post{\n    if (this.draft) {\n\n      return this.draft;\n    } else {\n\n      return null;\n    }\n\n    }\n    showMaxid(): any{\n      return this.maxPostid;\n    }\n\n        updatePost(username: string, post: Post): Promise<void> {\n          let update = fetch(\"/api/\" + username + '/' + post.postid, {\n            headers: { \"Content-Type\": \"application/json; charset=utf-8\" },\n            method: 'PUT',\n            body: JSON.stringify({\n              title: post.title,\n              body: post.body,\n              modified: new Date(),})})\n            .then(res => {\n              if (res.status === 200) {\n                console.log('update success.')\r\n              }\n            })\n            .catch((error) => {\n              console.error('Error:', error);\n            });\n          return update;\n\n        }\n      //  sends an HTTP DELETE request to /api/:username/:postid to delete\n        //  the corresponding post from the server. In case of error, the promise is rejected to Error(status_code).\n        deletePost(username: string, postid: number): Promise<void> {\n          let res = fetch(\"/api/\" + username + '/' + postid, {\n            method: 'DELETE'})\n            .then(res => {\n              if (res.status === 204) {\n                console.log('deleted success.')\r\n              }\n            })\n            .catch((error) => {\n              console.error('Error:', error);\n\n            });\n          return res;\n        }\n\n}\n  export class Post {\n    postid: number;\n    created: Date;\n    modified: Date;\n     title: string;\n    body: string;\n  }\n","import { Component, OnInit } from '@angular/core';\nimport { BlogService, Post } from '../blog.service';\nimport { ActivatedRoute, Router, Params } from '@angular/router';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Component({\n  selector: 'app-edit',\n  templateUrl: './edit.component.html',\n  styleUrls: ['./edit.component.css']\n})\nexport class EditComponent implements OnInit {\n  public username: string;\n  public post: Post;\n  \n  private copy: Post;\n  private form: FormGroup;\n\n  constructor( private blogService: BlogService,\n                              private router: Router,\n                              private activatedRoute: ActivatedRoute)\n                              {this.username = this.parseJWT(document.cookie).usr; }\n\n  ngOnInit(): void {\n    let postid = this.activatedRoute.snapshot.paramMap.get('id');\n    /*this.post = this.blogService.getCurrentDraft();\n    if (this.post && this.post.postid === Number(postid)) {\n      //this.copy = new Post(this.post);\n    } else {\n      console.log(Number(postid), \"idid!\");\n      this.blogService.getPost(this.username, Number(postid)).then(res => this.post = res);\n    } */\n    this.activatedRoute.params.subscribe(\n      params => {\n        let postid = this.activatedRoute.snapshot.paramMap.get('id');\n        this.post = this.blogService.getCurrentDraft();\n        if (this.post && this.post.postid === Number(postid)) {\n          console.log(\"match!\");\n        }else{\n          console.log(Number(postid), \"idid!\");\n         this.blogService.getPost(this.username, Number(postid)).then(res=> this.post = res);\n      \n        }\n    }\n    ) \n\n  }\n\n  getPost(): void{\n    this.blogService.getPost(this.username, this.post.postid).then(res => this.post = res);;\n\n  }\n\n  delete(): void{\n    console.log(\"delete\", this.username, this.post.postid);\n    this.blogService.deletePost(this.username, this.post.postid);\n    window.location.reload(true);\n    this.router.navigate(['/'])\n\n  }\n  save(): void{\n    console.log(\"save\", this.username, this.post.postid, this.post.body);\n    let curpost: Post[];\n    this.blogService.fetchPosts(this.username).then(res => {\n      //curpost = res;\r\n      let flag = 0;\n      for (let curpo in res) {\n        if (Number(res[curpo].postid) === this.post.postid) {\r\n          flag = 1;\r\n        }\r\n      }\n      if (flag === 0) {\n        this.blogService.newPost(this.username, this.post);\r\n\r\n      } else {\n        console.log(\"update post here.\");\n        this.blogService.updatePost(this.username, this.post);\n      }\r\n      console.log(\"save over here.\");\r\n      window.location.reload(true);\r\n    });\n    \n    \n  }\n\n  preview(): void{\n    this.blogService.setCurrentDraft(this.post);\n    this.router.navigate(['/preview/',this.post.postid]);\n}\nprivate parseJWT(token)\n  {\n      let base64Url = token.split('.')[1];\n      let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      return JSON.parse(atob(base64));\n  }\n}\n","\r\n  <div *ngIf=\"post\">\r\n\r\n  <div class = \"column edit\">\r\n    <form>\r\n      <div class=\"form-text\">\r\n\t      <label for=\"title\">Title</label> <br>\r\n\t      <input class=\"form-control\" type=\"text\" onclick=\"this.select()\" id=\"title\" required [(ngModel)]=\"post.title\" name=\"title\" placeholder=\"Enter the title....\" autofocus> <br>\r\n      </div>\r\n      <div class=\"form-text\">\r\n\t      <label for=\"Body\">Body</label> <br>\r\n        <textarea class=\"form-control\" id=\"body\" required [(ngModel)]=\"post.body\" name=\"body\" placeholder=\"Enter the content....\" style=\"height:400px\"></textarea>\r\n      </div>\r\n    </form>\r\n    <p>Last Modified: {{post.modified| date:'MM/dd/yy, hh:mm:ss'}}</p>\r\n    <div class=\"btn-group btn-group-lg\">\r\n      <button (click)=\"delete()\">delete</button>\r\n      <button (click)=\"save()\">save</button>\r\n      <button [routerLink]=\"['/preview/', post.postid]\">preview</button>\r\n    </div>\r\n  </div>\r\n  </div>\r\n","import { Component, OnInit } from '@angular/core';\nimport { BlogService, Post } from '../blog.service';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Subscription } from 'rxjs';\nimport { HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.css']\n})\nexport class ListComponent implements OnInit {\n  //const maxID;\n  public username: string;\n  constructor(private blogService: BlogService,\n    private router: Router,\n    private activatedRoute: ActivatedRoute) { this.username = this.parseJWT(document.cookie).usr; }\n  //public username: string;\n  //const payload = this.parseJWT(document.cookie);\n  //username = this.parseJWT(document.cookie).usr;\n  public posts: Post[];\n\n\n  ngOnInit(): void {\n\n    this.getPost();\n    //this.router.paramMap.subscribe(() => {\n    //console.log('init subscribe');\n    //this.getPost()});\n    this.activatedRoute.paramMap.subscribe(() =>{\n      this.getPost();\n    }\n    );\n  }\n  getPost(): void{\n    console.log(\"list get post.\")\n    this.blogService.fetchPosts(this.username).then(res => this.posts = res );\n\n      //.subscribe(posts => this.posts = posts);\n\n  }\n\n  onSelect(id: number): void{\n    let selectPost = this.posts[id];\n    console.log(selectPost.postid);\n    this.blogService.setCurrentDraft(selectPost);\n    this.router.navigate(['/edit/'+ selectPost.postid]);\n  }\n  newPost(): void{\n    //let nextPostid = maxID;\n    //username = this.posts.username;\n    let postid = this.blogService.showMaxid() + 1;\n    let curUsername = this.username;\n\n    let ret : Post = {\n                  //username: curUsername,\n                  postid: postid,\n                  created: new Date(Date.now()),\n                  modified:  new Date(Date.now()),\n                  title: \"\",\n                  body: \"\"\n    };\n    console.log(\"list new post\", ret.postid);\n    //this.blogService.newPost(this.username, ret);\n    this.blogService.setCurrentDraft(ret);\n\n\n    //ret.observable.subscribe(\n    this.router.navigate(['/edit/', postid])\n    //)\n\n  }\n  private parseJWT(token)\n  {\n      let base64Url = token.split('.')[1];\n      let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n      return JSON.parse(atob(base64));\n  }\n\n}\n","<div class=\"list-container\" id=\"parent\">\n\n  <div class = \"column list\" >\n  <h2> Posts List</h2>\n  <ul class = \"posts\" style=\"width:50%\">\n\n  <li *ngFor=\"let post of posts; let i = index\">\n    <div class=\"blog-post\" (click) =\"onSelect(i) \">\n      <div class=\"post-title\"> Title: {{post.title}}  </div>\n      <div> Time: {{post.created | date:'(MM/dd/yy - hh:mm:ss)'}} </div>\n    </div>\n  </li><br>\n  </ul>\n<button (click)=\"newPost()\">New Post</button>\n</div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Parser, HtmlRenderer } from 'commonmark';\nimport { Post, BlogService } from '../blog.service';\nimport { Router, ActivatedRoute } from '@angular/router';\n\n@Component({\n  selector: 'app-preview',\n  templateUrl: './preview.component.html',\n  styleUrls: ['./preview.component.css']\n})\nexport class PreviewComponent implements OnInit {\n  public post: Post;\n  public title_preview: string;\n  public body_preview: string;\n  public username: string;\n\n  constructor(\n                private blogService: BlogService,\n                private router: Router,\n                private activatedRoute: ActivatedRoute) { }\n\n  ngOnInit(): void {\n    this.username = this.parseJWT(document.cookie).usr;\n    this.activatedRoute.params.subscribe(() => this.getPost());\n  }\n\n  getPost(): void{\n    let postid = this.activatedRoute.snapshot.paramMap.get('id');\n    console.log(postid);\n\tthis.post = this.blogService.getCurrentDraft();\n   // this.blogService.getPost(this.username, Number(postid)).then(res => {\r\n   //   this.post = res;\r\n      console.log(this.post.title, this.post.body);\r\n      if (this.post) {\n        //this.post = post;\n\n        let reader = new Parser();\n        let writer = new HtmlRenderer();\n        this.title_preview = writer.render(reader.parse(this.post.title));\n        this.body_preview = writer.render(reader.parse(this.post.body));\n        console.log(this.title_preview, this.body_preview);\n      }\r\n   /// });\n    //console.log(this.post.title, this.post.body);\n  }\n\n  editPost(): void{\n    this.router.navigate(['/edit/' + this.post.postid]);\n  }\n  private parseJWT(token) {\n    let base64Url = token.split('.')[1];\n    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n    return JSON.parse(atob(base64));\n  }\n}\n","<div class=\"preview-container\">\r\n  <div *ngIf=\"post\">\r\n<div class = \"column preview\">\r\n    <h2>Preview Post</h2>\r\n    <div [innerHTML]=\"this.title_preview\"> </div>\r\n    <div [innerHTML]=\"this.body_preview\"> </div>\r\n    <div>\r\n      <button type=\"submit\" (click)=\"editPost()\"> Edit Post </button>\r\n    </div>\r\n</div>\r\n  </div>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}